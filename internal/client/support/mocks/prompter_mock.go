// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kuvalkin/gophkeeper/internal/client/tui/prompts (interfaces: Prompter)
//
// Generated by this command:
//
//	mockgen -destination=./prompter_mock.go -package=mocks github.com/kuvalkin/gophkeeper/internal/client/tui/prompts Prompter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPrompter is a mock of Prompter interface.
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
	isgomock struct{}
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter.
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance.
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// AskInt mocks base method.
func (m *MockPrompter) AskInt(ctx context.Context, prompt, placeholder string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskInt", ctx, prompt, placeholder)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskInt indicates an expected call of AskInt.
func (mr *MockPrompterMockRecorder) AskInt(ctx, prompt, placeholder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskInt", reflect.TypeOf((*MockPrompter)(nil).AskInt), ctx, prompt, placeholder)
}

// AskPassword mocks base method.
func (m *MockPrompter) AskPassword(ctx context.Context, prompt, placeholder string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskPassword", ctx, prompt, placeholder)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskPassword indicates an expected call of AskPassword.
func (mr *MockPrompterMockRecorder) AskPassword(ctx, prompt, placeholder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskPassword", reflect.TypeOf((*MockPrompter)(nil).AskPassword), ctx, prompt, placeholder)
}

// AskString mocks base method.
func (m *MockPrompter) AskString(ctx context.Context, prompt, placeholder string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskString", ctx, prompt, placeholder)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskString indicates an expected call of AskString.
func (mr *MockPrompterMockRecorder) AskString(ctx, prompt, placeholder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskString", reflect.TypeOf((*MockPrompter)(nil).AskString), ctx, prompt, placeholder)
}

// AskText mocks base method.
func (m *MockPrompter) AskText(ctx context.Context, prompt, placeholder string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskText", ctx, prompt, placeholder)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskText indicates an expected call of AskText.
func (mr *MockPrompterMockRecorder) AskText(ctx, prompt, placeholder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskText", reflect.TypeOf((*MockPrompter)(nil).AskText), ctx, prompt, placeholder)
}

// Confirm mocks base method.
func (m *MockPrompter) Confirm(ctx context.Context, prompt string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", ctx, prompt)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Confirm indicates an expected call of Confirm.
func (mr *MockPrompterMockRecorder) Confirm(ctx, prompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockPrompter)(nil).Confirm), ctx, prompt)
}
