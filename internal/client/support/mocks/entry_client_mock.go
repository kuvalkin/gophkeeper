// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kuvalkin/gophkeeper/internal/proto/entry/v1 (interfaces: EntryServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=./entry_client_mock.go -package=mocks github.com/kuvalkin/gophkeeper/internal/proto/entry/v1 EntryServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/kuvalkin/gophkeeper/internal/proto/entry/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockEntryServiceClient is a mock of EntryServiceClient interface.
type MockEntryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEntryServiceClientMockRecorder
	isgomock struct{}
}

// MockEntryServiceClientMockRecorder is the mock recorder for MockEntryServiceClient.
type MockEntryServiceClientMockRecorder struct {
	mock *MockEntryServiceClient
}

// NewMockEntryServiceClient creates a new mock instance.
func NewMockEntryServiceClient(ctrl *gomock.Controller) *MockEntryServiceClient {
	mock := &MockEntryServiceClient{ctrl: ctrl}
	mock.recorder = &MockEntryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryServiceClient) EXPECT() *MockEntryServiceClientMockRecorder {
	return m.recorder
}

// DeleteEntry mocks base method.
func (m *MockEntryServiceClient) DeleteEntry(ctx context.Context, in *v1.DeleteEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEntry", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntry indicates an expected call of DeleteEntry.
func (mr *MockEntryServiceClientMockRecorder) DeleteEntry(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntry", reflect.TypeOf((*MockEntryServiceClient)(nil).DeleteEntry), varargs...)
}

// GetEntry mocks base method.
func (m *MockEntryServiceClient) GetEntry(ctx context.Context, in *v1.GetEntryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.Entry], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntry", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[v1.Entry])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockEntryServiceClientMockRecorder) GetEntry(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockEntryServiceClient)(nil).GetEntry), varargs...)
}

// SetEntry mocks base method.
func (m *MockEntryServiceClient) SetEntry(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v1.SetEntryRequest, v1.SetEntryResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetEntry", varargs...)
	ret0, _ := ret[0].(grpc.BidiStreamingClient[v1.SetEntryRequest, v1.SetEntryResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEntry indicates an expected call of SetEntry.
func (mr *MockEntryServiceClientMockRecorder) SetEntry(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEntry", reflect.TypeOf((*MockEntryServiceClient)(nil).SetEntry), varargs...)
}
