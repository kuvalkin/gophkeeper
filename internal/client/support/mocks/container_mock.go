// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kuvalkin/gophkeeper/internal/client/service/container (interfaces: Container)
//
// Generated by this command:
//
//	mockgen -destination=./container_mock.go -package=mocks github.com/kuvalkin/gophkeeper/internal/client/service/container Container
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/kuvalkin/gophkeeper/internal/client/service/auth"
	entry "github.com/kuvalkin/gophkeeper/internal/client/service/entry"
	secret "github.com/kuvalkin/gophkeeper/internal/client/service/secret"
	prompts "github.com/kuvalkin/gophkeeper/internal/client/tui/prompts"
	gomock "go.uber.org/mock/gomock"
)

// MockContainer is a mock of Container interface.
type MockContainer struct {
	ctrl     *gomock.Controller
	recorder *MockContainerMockRecorder
	isgomock struct{}
}

// MockContainerMockRecorder is the mock recorder for MockContainer.
type MockContainerMockRecorder struct {
	mock *MockContainer
}

// NewMockContainer creates a new mock instance.
func NewMockContainer(ctrl *gomock.Controller) *MockContainer {
	mock := &MockContainer{ctrl: ctrl}
	mock.recorder = &MockContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainer) EXPECT() *MockContainerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockContainer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockContainerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockContainer)(nil).Close))
}

// GetAuthService mocks base method.
func (m *MockContainer) GetAuthService(ctx context.Context) (auth.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthService", ctx)
	ret0, _ := ret[0].(auth.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthService indicates an expected call of GetAuthService.
func (mr *MockContainerMockRecorder) GetAuthService(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthService", reflect.TypeOf((*MockContainer)(nil).GetAuthService), ctx)
}

// GetEntryService mocks base method.
func (m *MockContainer) GetEntryService(ctx context.Context) (entry.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryService", ctx)
	ret0, _ := ret[0].(entry.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryService indicates an expected call of GetEntryService.
func (mr *MockContainerMockRecorder) GetEntryService(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryService", reflect.TypeOf((*MockContainer)(nil).GetEntryService), ctx)
}

// GetPrompter mocks base method.
func (m *MockContainer) GetPrompter(ctx context.Context) (prompts.Prompter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrompter", ctx)
	ret0, _ := ret[0].(prompts.Prompter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrompter indicates an expected call of GetPrompter.
func (mr *MockContainerMockRecorder) GetPrompter(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrompter", reflect.TypeOf((*MockContainer)(nil).GetPrompter), ctx)
}

// GetSecretService mocks base method.
func (m *MockContainer) GetSecretService(ctx context.Context) (secret.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretService", ctx)
	ret0, _ := ret[0].(secret.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretService indicates an expected call of GetSecretService.
func (mr *MockContainerMockRecorder) GetSecretService(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretService", reflect.TypeOf((*MockContainer)(nil).GetSecretService), ctx)
}
