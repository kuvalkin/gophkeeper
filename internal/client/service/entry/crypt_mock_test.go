// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kuvalkin/gophkeeper/internal/client/service/entry (interfaces: Crypt)
//
// Generated by this command:
//
//	mockgen -destination=./crypt_mock_test.go -package=entry_test github.com/kuvalkin/gophkeeper/internal/client/service/entry Crypt
//

// Package entry_test is a generated GoMock package.
package entry_test

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCrypt is a mock of Crypt interface.
type MockCrypt struct {
	ctrl     *gomock.Controller
	recorder *MockCryptMockRecorder
	isgomock struct{}
}

// MockCryptMockRecorder is the mock recorder for MockCrypt.
type MockCryptMockRecorder struct {
	mock *MockCrypt
}

// NewMockCrypt creates a new mock instance.
func NewMockCrypt(ctrl *gomock.Controller) *MockCrypt {
	mock := &MockCrypt{ctrl: ctrl}
	mock.recorder = &MockCryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrypt) EXPECT() *MockCryptMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockCrypt) Decrypt(src io.Reader) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", src)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockCryptMockRecorder) Decrypt(src any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCrypt)(nil).Decrypt), src)
}

// Encrypt mocks base method.
func (m *MockCrypt) Encrypt(dst io.Writer) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", dst)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockCryptMockRecorder) Encrypt(dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCrypt)(nil).Encrypt), dst)
}
