// Code generated by MockGen. DO NOT EDIT.
// Source: google.golang.org/grpc (interfaces: ServerStreamingClient)
//
// Generated by this command:
//
//	mockgen -destination=./server_stream_mock_test.go -package=entry_test google.golang.org/grpc ServerStreamingClient
//

// Package entry_test is a generated GoMock package.
package entry_test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// MockServerStreamingClient is a mock of ServerStreamingClient interface.
type MockServerStreamingClient[Res any] struct {
	ctrl     *gomock.Controller
	recorder *MockServerStreamingClientMockRecorder[Res]
	isgomock struct{}
}

// MockServerStreamingClientMockRecorder is the mock recorder for MockServerStreamingClient.
type MockServerStreamingClientMockRecorder[Res any] struct {
	mock *MockServerStreamingClient[Res]
}

// NewMockServerStreamingClient creates a new mock instance.
func NewMockServerStreamingClient[Res any](ctrl *gomock.Controller) *MockServerStreamingClient[Res] {
	mock := &MockServerStreamingClient[Res]{ctrl: ctrl}
	mock.recorder = &MockServerStreamingClientMockRecorder[Res]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerStreamingClient[Res]) EXPECT() *MockServerStreamingClientMockRecorder[Res] {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockServerStreamingClient[Res]) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockServerStreamingClientMockRecorder[Res]) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockServerStreamingClient[Res])(nil).CloseSend))
}

// Context mocks base method.
func (m *MockServerStreamingClient[Res]) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockServerStreamingClientMockRecorder[Res]) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockServerStreamingClient[Res])(nil).Context))
}

// Header mocks base method.
func (m *MockServerStreamingClient[Res]) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockServerStreamingClientMockRecorder[Res]) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockServerStreamingClient[Res])(nil).Header))
}

// Recv mocks base method.
func (m *MockServerStreamingClient[Res]) Recv() (*Res, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Res)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockServerStreamingClientMockRecorder[Res]) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockServerStreamingClient[Res])(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockServerStreamingClient[Res]) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockServerStreamingClientMockRecorder[Res]) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockServerStreamingClient[Res])(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockServerStreamingClient[Res]) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockServerStreamingClientMockRecorder[Res]) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockServerStreamingClient[Res])(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockServerStreamingClient[Res]) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockServerStreamingClientMockRecorder[Res]) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockServerStreamingClient[Res])(nil).Trailer))
}
