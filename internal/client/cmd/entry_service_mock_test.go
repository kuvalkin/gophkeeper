// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kuvalkin/gophkeeper/internal/client/service/entry (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=./internal/client/cmd/entry_service_mock_test.go -package=cmd -mock_names Service=MockEntryService github.com/kuvalkin/gophkeeper/internal/client/service/entry Service
//

// Package cmd is a generated GoMock package.
package cmd

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEntryService is a mock of Service interface.
type MockEntryService struct {
	ctrl     *gomock.Controller
	recorder *MockEntryServiceMockRecorder
	isgomock struct{}
}

// MockEntryServiceMockRecorder is the mock recorder for MockEntryService.
type MockEntryServiceMockRecorder struct {
	mock *MockEntryService
}

// NewMockEntryService creates a new mock instance.
func NewMockEntryService(ctrl *gomock.Controller) *MockEntryService {
	mock := &MockEntryService{ctrl: ctrl}
	mock.recorder = &MockEntryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryService) EXPECT() *MockEntryServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockEntryService) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEntryServiceMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEntryService)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockEntryService) Get(ctx context.Context, key string) (string, io.ReadCloser, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Get indicates an expected call of Get.
func (mr *MockEntryServiceMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEntryService)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockEntryService) Set(ctx context.Context, key, name, notes string, content io.ReadCloser, onOverwrite func() bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, name, notes, content, onOverwrite)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockEntryServiceMockRecorder) Set(ctx, key, name, notes, content, onOverwrite any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockEntryService)(nil).Set), ctx, key, name, notes, content, onOverwrite)
}
