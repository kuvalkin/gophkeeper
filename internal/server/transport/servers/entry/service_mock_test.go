// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kuvalkin/gophkeeper/internal/server/service/entry (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=./internal/server/transport/servers/entry/service_mock_test.go -package=entry_test github.com/kuvalkin/gophkeeper/internal/server/service/entry Service
//

// Package entry_test is a generated GoMock package.
package entry_test

import (
	context "context"
	io "io"
	reflect "reflect"

	entry "github.com/kuvalkin/gophkeeper/internal/server/service/entry"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DeleteEntry mocks base method.
func (m *MockService) DeleteEntry(ctx context.Context, userID, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(ctx, userID, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).DeleteEntry), ctx, userID, key)
}

// GetEntry mocks base method.
func (m *MockService) GetEntry(ctx context.Context, userID, key string) (entry.Metadata, io.ReadCloser, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, key)
	ret0, _ := ret[0].(entry.Metadata)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(ctx, userID, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).GetEntry), ctx, userID, key)
}

// SetEntry mocks base method.
func (m *MockService) SetEntry(ctx context.Context, userID string, md entry.Metadata, overwrite bool) (chan<- entry.UploadChunk, <-chan entry.SetEntryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, userID, md, overwrite)
	ret0, _ := ret[0].(chan<- entry.UploadChunk)
	ret1, _ := ret[1].(<-chan entry.SetEntryResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Set indicates an expected call of Set.
func (mr *MockServiceMockRecorder) Set(ctx, userID, md, overwrite any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockService)(nil).SetEntry), ctx, userID, md, overwrite)
}
