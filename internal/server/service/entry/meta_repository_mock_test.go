// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kuvalkin/gophkeeper/internal/server/service/entry (interfaces: MetadataRepository)
//
// Generated by this command:
//
//	mockgen -destination=./internal/server/service/entry/meta_repository_mock_test.go -package=entry_test github.com/kuvalkin/gophkeeper/internal/server/service/entry MetadataRepository
//

// Package entry_test is a generated GoMock package.
package entry_test

import (
	context "context"
	reflect "reflect"

	entry "github.com/kuvalkin/gophkeeper/internal/server/service/entry"
	gomock "go.uber.org/mock/gomock"
)

// MockMetadataRepository is a mock of MetadataRepository interface.
type MockMetadataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataRepositoryMockRecorder
	isgomock struct{}
}

// MockMetadataRepositoryMockRecorder is the mock recorder for MockMetadataRepository.
type MockMetadataRepositoryMockRecorder struct {
	mock *MockMetadataRepository
}

// NewMockMetadataRepository creates a new mock instance.
func NewMockMetadataRepository(ctrl *gomock.Controller) *MockMetadataRepository {
	mock := &MockMetadataRepository{ctrl: ctrl}
	mock.recorder = &MockMetadataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataRepository) EXPECT() *MockMetadataRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMetadataRepository) Delete(ctx context.Context, userID, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMetadataRepositoryMockRecorder) Delete(ctx, userID, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMetadataRepository)(nil).Delete), ctx, userID, key)
}

// Get mocks base method.
func (m *MockMetadataRepository) Get(ctx context.Context, userID, key string) (entry.Metadata, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, key)
	ret0, _ := ret[0].(entry.Metadata)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockMetadataRepositoryMockRecorder) Get(ctx, userID, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetadataRepository)(nil).Get), ctx, userID, key)
}

// Set mocks base method.
func (m *MockMetadataRepository) Set(ctx context.Context, userID string, md entry.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, userID, md)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockMetadataRepositoryMockRecorder) Set(ctx, userID, md any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMetadataRepository)(nil).Set), ctx, userID, md)
}
