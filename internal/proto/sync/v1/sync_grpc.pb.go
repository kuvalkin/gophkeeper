// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/sync/v1/sync.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SyncService_GetUpdates_FullMethodName    = "/com.kuvalkin.gophkeeper.proto.sync.v1.SyncService/GetUpdates"
	SyncService_UpdateEntry_FullMethodName   = "/com.kuvalkin.gophkeeper.proto.sync.v1.SyncService/UpdateEntry"
	SyncService_DeleteEntry_FullMethodName   = "/com.kuvalkin.gophkeeper.proto.sync.v1.SyncService/DeleteEntry"
	SyncService_DownloadEntry_FullMethodName = "/com.kuvalkin.gophkeeper.proto.sync.v1.SyncService/DownloadEntry"
)

// SyncServiceClient is the client API for SyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncServiceClient interface {
	GetUpdates(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUpdatesResponse], error)
	UpdateEntry(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateEntryRequest, UpdateEntryResponse], error)
	DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*DeleteEntryResponse, error)
	DownloadEntry(ctx context.Context, in *DownloadEntryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadEntryResponse], error)
}

type syncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncServiceClient(cc grpc.ClientConnInterface) SyncServiceClient {
	return &syncServiceClient{cc}
}

func (c *syncServiceClient) GetUpdates(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUpdatesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SyncService_ServiceDesc.Streams[0], SyncService_GetUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetUpdatesRequest, GetUpdatesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SyncService_GetUpdatesClient = grpc.ServerStreamingClient[GetUpdatesResponse]

func (c *syncServiceClient) UpdateEntry(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateEntryRequest, UpdateEntryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SyncService_ServiceDesc.Streams[1], SyncService_UpdateEntry_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateEntryRequest, UpdateEntryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SyncService_UpdateEntryClient = grpc.ClientStreamingClient[UpdateEntryRequest, UpdateEntryResponse]

func (c *syncServiceClient) DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*DeleteEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEntryResponse)
	err := c.cc.Invoke(ctx, SyncService_DeleteEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) DownloadEntry(ctx context.Context, in *DownloadEntryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadEntryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SyncService_ServiceDesc.Streams[2], SyncService_DownloadEntry_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadEntryRequest, DownloadEntryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SyncService_DownloadEntryClient = grpc.ServerStreamingClient[DownloadEntryResponse]

// SyncServiceServer is the server API for SyncService service.
// All implementations must embed UnimplementedSyncServiceServer
// for forward compatibility.
type SyncServiceServer interface {
	GetUpdates(*GetUpdatesRequest, grpc.ServerStreamingServer[GetUpdatesResponse]) error
	UpdateEntry(grpc.ClientStreamingServer[UpdateEntryRequest, UpdateEntryResponse]) error
	DeleteEntry(context.Context, *DeleteEntryRequest) (*DeleteEntryResponse, error)
	DownloadEntry(*DownloadEntryRequest, grpc.ServerStreamingServer[DownloadEntryResponse]) error
	mustEmbedUnimplementedSyncServiceServer()
}

// UnimplementedSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSyncServiceServer struct{}

func (UnimplementedSyncServiceServer) GetUpdates(*GetUpdatesRequest, grpc.ServerStreamingServer[GetUpdatesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetUpdates not implemented")
}
func (UnimplementedSyncServiceServer) UpdateEntry(grpc.ClientStreamingServer[UpdateEntryRequest, UpdateEntryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateEntry not implemented")
}
func (UnimplementedSyncServiceServer) DeleteEntry(context.Context, *DeleteEntryRequest) (*DeleteEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntry not implemented")
}
func (UnimplementedSyncServiceServer) DownloadEntry(*DownloadEntryRequest, grpc.ServerStreamingServer[DownloadEntryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadEntry not implemented")
}
func (UnimplementedSyncServiceServer) mustEmbedUnimplementedSyncServiceServer() {}
func (UnimplementedSyncServiceServer) testEmbeddedByValue()                     {}

// UnsafeSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncServiceServer will
// result in compilation errors.
type UnsafeSyncServiceServer interface {
	mustEmbedUnimplementedSyncServiceServer()
}

func RegisterSyncServiceServer(s grpc.ServiceRegistrar, srv SyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SyncService_ServiceDesc, srv)
}

func _SyncService_GetUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncServiceServer).GetUpdates(m, &grpc.GenericServerStream[GetUpdatesRequest, GetUpdatesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SyncService_GetUpdatesServer = grpc.ServerStreamingServer[GetUpdatesResponse]

func _SyncService_UpdateEntry_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SyncServiceServer).UpdateEntry(&grpc.GenericServerStream[UpdateEntryRequest, UpdateEntryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SyncService_UpdateEntryServer = grpc.ClientStreamingServer[UpdateEntryRequest, UpdateEntryResponse]

func _SyncService_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncService_DeleteEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).DeleteEntry(ctx, req.(*DeleteEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_DownloadEntry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadEntryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncServiceServer).DownloadEntry(m, &grpc.GenericServerStream[DownloadEntryRequest, DownloadEntryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SyncService_DownloadEntryServer = grpc.ServerStreamingServer[DownloadEntryResponse]

// SyncService_ServiceDesc is the grpc.ServiceDesc for SyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.kuvalkin.gophkeeper.proto.sync.v1.SyncService",
	HandlerType: (*SyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteEntry",
			Handler:    _SyncService_DeleteEntry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUpdates",
			Handler:       _SyncService_GetUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateEntry",
			Handler:       _SyncService_UpdateEntry_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadEntry",
			Handler:       _SyncService_DownloadEntry_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/sync/v1/sync.proto",
}
